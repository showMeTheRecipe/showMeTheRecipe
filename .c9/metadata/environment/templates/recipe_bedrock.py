{"filter":false,"title":"recipe_bedrock.py","tooltip":"/templates/recipe_bedrock.py","undoManager":{"mark":1,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":131,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify","import boto3","import json","import os","from dotenv import load_dotenv","","app = Flask(__name__)","","# .env 파일이 있으면 로드 (Cloud9 환경에서는 필요 없을 수 있음)","load_dotenv()","","# AWS SDK for Python (Boto3) 클라이언트 초기화","bedrock_client = boto3.client(","    'bedrock-runtime', ","    region_name=os.environ.get('AWS_DEFAULT_REGION', 'us-east-1')  # AWS 리전","    # Cloud9에서는 AWS 자격 증명을 따로 지정할 필요 없음",")","","def extract_recipe_info(model_id: str, input_text: str) -> dict:","    \"\"\"","    주어진 텍스트에서 음식 이름, 재료, 조리 순서를 추출하기 위해 Bedrock 모델에 요청을 보내는 함수입니다.","    ","    :param model_id: 사용할 Bedrock 모델의 ID","    :param input_text: 요리 정보가 포함된 원본 텍스트","    :return: 음식 이름, 재료, 조리 순서를 포함하는 사전","    \"\"\"","    try:","        # LLM에게 음식 이름, 재료, 조리 순서를 추출하도록 요청합니다.","        prompt = (","        f\"Extract the following information from the given text:\\n\\n\"","        f\"1. **Recipe Name:** <Extracted Recipe Name>\\n\"","        f\"2. **Ingredients:** <List of Ingredients>\\n\"","        f\"3. **Cooking Instructions:** <Cooking Instructions>\\n\\n\"","        f\"Text: {input_text}\\n\\n\"","        f\"Respond with the information in the following format:\\n\\n\"","        f\"Recipe Name: <Extracted Recipe Name>\\n\"","        f\"Ingredients:\\n - items of <List of Ingredients> with newline for each item\"","        f\"Cooking Instructions:\\n steps of <Cooking Instructions> with newline for each step\"","        )","","        ","        response = bedrock_client.invoke_model(","            modelId=model_id,                                      # 사용할 모델의 ID","            body=json.dumps({\"prompt\": prompt}).encode('utf-8'),  # 요청 본문","            contentType='application/json',                        # 본문 내용의 타입","            accept='application/json'                              # 응답 타입","        )","        ","        # 응답에서 본문을 읽고 UTF-8로 디코딩하여 텍스트를 추출합니다.","        response_body = json.loads(response['body'].read().decode('utf-8'))","        return {","            'type': 'recipe_info',","            'content': response_body.get('completion', ''),","            'metadata': {'source': 'extract_recipe_info'}","        }","    ","    except Exception as e:","        return {'error': str(e)}","","# ChatGPT에 요청을 보내는 엔드포인트","@app.route('/chat', methods=['POST'])","def chat():","    user_input = request.json.get('message', '')","    ","    if not user_input:","        return jsonify({'error': 'No input message provided'}), 400","    ","    prompt = (","        f\"다음 텍스트에서 정보를 추출하십시오:\\n\\n\"","        f\"1. **레시피 이름:** <추출된 레시피 이름>\\n\"","        f\"2. **재료:** <재료 목록>\\n\"","        f\"3. **조리 방법:** <조리 방법>\\n\\n\"","        f\"텍스트: {user_input}\\n\\n\"","        f\"다음 형식으로 정보를 응답하십시오:\\n\\n\"","        f\"레시피 이름: <추출된 레시피 이름>\\n\"","        f\"재료:\\n - <재료 1> (<일반적인 일인분 중량>g, 약 <칼로리> 칼로리)\\n\"","        f\" - <재료 2> (<일반적인 일인분 중량>g, 약 <칼로리> 칼로리)\\n\"","        f\" - (각 재료에 대하여 계속...)\\n\"","        f\" 전체 칼로리: <전체 칼로리>\"","        f\"조리 방법:\\n - <단계 1>\\n - <단계 2>\\n - (각 단계에 대하여 계속...)\"","    )","","","","","    try:","        # Bedrock에 요청 보내기","        body = json.dumps(","            {","                \"anthropic_version\": \"bedrock-2023-05-31\",","                \"max_tokens\": 1000,","                \"messages\": [{","                    \"role\": \"user\",","                    \"content\": [{\"type\": \"text\", \"text\": prompt}]","                }],","            }","        )","        ","        response = bedrock_client.invoke_model(","            modelId=\"anthropic.claude-3-sonnet-20240229-v1:0\",","            body=body,","        )","        response_body = json.loads(response.get(\"body\").read())","        output_text = response_body[\"content\"][0][\"text\"]","    ","        ","        return jsonify({'response': output_text})","    ","    except Exception as e:","        return jsonify({'error': str(e)}), 500","","# 요리 정보 추출을 위한 새로운 엔드포인트","@app.route('/extract_recipe', methods=['POST'])","def extract_recipe():","    data = request.json","    model_id = data.get('model_id', '')","    input_text = data.get('text', '')","","    if not model_id or not input_text:","        return jsonify({'error': 'Model ID and input text are required'}), 400","","    result = extract_recipe_info(model_id, input_text)","    ","    if 'error' in result:","        return jsonify({'error': result['error']}), 500","","    return jsonify(result)","","if __name__ == '__main__':","    # Cloud9에서는 0.0.0.0으로 호스트를 설정하여 외부 접근 허용","    app.run(debug=True, host='0.0.0.0')",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":131,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify","import boto3","import json","import os","from dotenv import load_dotenv","","app = Flask(__name__)","","# .env 파일이 있으면 로드 (Cloud9 환경에서는 필요 없을 수 있음)","load_dotenv()","","# AWS SDK for Python (Boto3) 클라이언트 초기화","bedrock_client = boto3.client(","    'bedrock-runtime', ","    region_name=os.environ.get('AWS_DEFAULT_REGION', 'us-east-1')  # AWS 리전","    # Cloud9에서는 AWS 자격 증명을 따로 지정할 필요 없음",")","","def extract_recipe_info(model_id: str, input_text: str) -> dict:","    \"\"\"","    주어진 텍스트에서 음식 이름, 재료, 조리 순서를 추출하기 위해 Bedrock 모델에 요청을 보내는 함수입니다.","    ","    :param model_id: 사용할 Bedrock 모델의 ID","    :param input_text: 요리 정보가 포함된 원본 텍스트","    :return: 음식 이름, 재료, 조리 순서를 포함하는 사전","    \"\"\"","    try:","        # LLM에게 음식 이름, 재료, 조리 순서를 추출하도록 요청합니다.","        prompt = (","        f\"Extract the following information from the given text:\\n\\n\"","        f\"1. **Recipe Name:** <Extracted Recipe Name>\\n\"","        f\"2. **Ingredients:** <List of Ingredients>\\n\"","        f\"3. **Cooking Instructions:** <Cooking Instructions>\\n\\n\"","        f\"Text: {input_text}\\n\\n\"","        f\"Respond with the information in the following format:\\n\\n\"","        f\"Recipe Name: <Extracted Recipe Name>\\n\"","        f\"Ingredients:\\n - items of <List of Ingredients> with newline for each item\"","        f\"Cooking Instructions:\\n steps of <Cooking Instructions> with newline for each step\"","        )","","        ","        response = bedrock_client.invoke_model(","            modelId=model_id,                                      # 사용할 모델의 ID","            body=json.dumps({\"prompt\": prompt}).encode('utf-8'),  # 요청 본문","            contentType='application/json',                        # 본문 내용의 타입","            accept='application/json'                              # 응답 타입","        )","        ","        # 응답에서 본문을 읽고 UTF-8로 디코딩하여 텍스트를 추출합니다.","        response_body = json.loads(response['body'].read().decode('utf-8'))","        return {","            'type': 'recipe_info',","            'content': response_body.get('completion', ''),","            'metadata': {'source': 'extract_recipe_info'}","        }","    ","    except Exception as e:","        return {'error': str(e)}","","# ChatGPT에 요청을 보내는 엔드포인트","@app.route('/chat', methods=['POST'])","def chat():","    user_input = request.json.get('message', '')","    ","    if not user_input:","        return jsonify({'error': 'No input message provided'}), 400","    ","    prompt = (","        f\"다음 텍스트에서 정보를 추출하십시오:\\n\\n\"","        f\"1. **레시피 이름:** <추출된 레시피 이름>\\n\"","        f\"2. **재료:** <재료 목록>\\n\"","        f\"3. **조리 방법:** <조리 방법>\\n\\n\"","        f\"텍스트: {user_input}\\n\\n\"","        f\"다음 형식으로 정보를 응답하십시오:\\n\\n\"","        f\"레시피 이름: <추출된 레시피 이름>\\n\"","        f\"재료:\\n - <재료 1> (<일반적인 일인분 중량>g, 약 <칼로리> 칼로리)\\n\"","        f\" - <재료 2> (<일반적인 일인분 중량>g, 약 <칼로리> 칼로리)\\n\"","        f\" - (각 재료에 대하여 계속...)\\n\"","        f\" 전체 칼로리: <전체 칼로리>\"","        f\"조리 방법:\\n - <단계 1>\\n - <단계 2>\\n - (각 단계에 대하여 계속...)\"","    )","","","","","    try:","        # Bedrock에 요청 보내기","        body = json.dumps(","            {","                \"anthropic_version\": \"bedrock-2023-05-31\",","                \"max_tokens\": 1000,","                \"messages\": [{","                    \"role\": \"user\",","                    \"content\": [{\"type\": \"text\", \"text\": prompt}]","                }],","            }","        )","        ","        response = bedrock_client.invoke_model(","            modelId=\"anthropic.claude-3-sonnet-20240229-v1:0\",","            body=body,","        )","        response_body = json.loads(response.get(\"body\").read())","        output_text = response_body[\"content\"][0][\"text\"]","    ","        ","        return jsonify({'response': output_text})","    ","    except Exception as e:","        return jsonify({'error': str(e)}), 500","","# 요리 정보 추출을 위한 새로운 엔드포인트","@app.route('/extract_recipe', methods=['POST'])","def extract_recipe():","    data = request.json","    model_id = data.get('model_id', '')","    input_text = data.get('text', '')","","    if not model_id or not input_text:","        return jsonify({'error': 'Model ID and input text are required'}), 400","","    result = extract_recipe_info(model_id, input_text)","    ","    if 'error' in result:","        return jsonify({'error': result['error']}), 500","","    return jsonify(result)","","if __name__ == '__main__':","    # Cloud9에서는 0.0.0.0으로 호스트를 설정하여 외부 접근 허용","    app.run(debug=True, host='0.0.0.0')",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":51,"column":0},"action":"insert","lines":["# recipe_bedrock.py","import boto3","import json","import os","from dotenv import load_dotenv","","load_dotenv()","","# AWS SDK for Python (Boto3) 클라이언트 초기화","bedrock_client = boto3.client(","    'bedrock-runtime', ","    region_name='us-east-1' # AWS 리전",")","","def extract_recipe_info(model_id: str, input_text: str) -> dict:","    \"\"\"","    주어진 텍스트에서 음식 이름, 재료, 조리 순서를 추출하기 위해 Bedrock 모델에 요청을 보내는 함수입니다.","    ","    :param model_id: 사용할 Bedrock 모델의 ID","    :param input_text: 요리 정보가 포함된 원본 텍스트","    :return: 음식 이름, 재료, 조리 순서를 포함하는 사전","    \"\"\"","    try:","        prompt = (","            f\"Extract the following information from the given text:\\n\\n\"","            f\"1. **Recipe Name:** <Extracted Recipe Name>\\n\"","            f\"2. **Ingredients:** <List of Ingredients>\\n\"","            f\"3. **Cooking Instructions:** <Cooking Instructions>\\n\\n\"","            f\"Text: {input_text}\\n\\n\"","            f\"Respond with the information in the following format:\\n\\n\"","            f\"Recipe Name: <Extracted Recipe Name>\\n\"","            f\"Ingredients:\\n - items of <List of Ingredients> with newline for each item\\n\"","            f\"Cooking Instructions:\\n steps of <Cooking Instructions> with newline for each step\"","        )","        ","        response = bedrock_client.invoke_model(","            modelId=model_id,                                      # 사용할 모델의 ID","            body=json.dumps({\"prompt\": prompt}).encode('utf-8'),  # 요청 본문","            contentType='application/json',                        # 본문 내용의 타입","            accept='application/json'                              # 응답 타입","        )","        ","        response_body = json.loads(response['body'].read().decode('utf-8'))","        return {","            'type': 'recipe_info',","            'content': response_body.get('completion', ''),","            'metadata': {'source': 'extract_recipe_info'}","        }","    ","    except Exception as e:","        return {'error': str(e)}",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":19,"column":40},"end":{"row":19,"column":40},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":71,"mode":"ace/mode/python"}},"timestamp":1725046966927,"hash":"09d9da050147770fb86444bc8b899c3f117aebfb"}